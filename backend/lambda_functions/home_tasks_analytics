import os
from google.oauth2 import service_account
from googleapiclient.discovery import build

CREDENTIALS_FILE = './entrypoint-423418-dc72dd5a0296.json' #Needs to be changed to fetch the file from the s3 bucket

SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']

def get_drive_service():
    credentials = service_account.Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
    service = build('drive', 'v3', credentials=credentials)
    return service

def get_folder_name(service, folder_id):
    try:
        folder = service.files().get(fileId=folder_id, fields='name').execute()
        return folder.get('name', 'Unknown Folder')
    except Exception as e:
        print(f"Error: {e}")
        return 'Unknown Folder'

def count_files_in_folder(service, folder_id):
    try:
        total_files = 0
        folder_name = get_folder_name(service, folder_id)

        def list_files(folder_id):
            nonlocal total_files
            query = f"'{folder_id}' in parents"
            results = service.files().list(
                q=query,
                pageSize=1000,
                fields="nextPageToken, files(id, name, mimeType)"
            ).execute()

            items = results.get('files', [])
            for item in items:
                if item['mimeType'] == 'application/vnd.google-apps.folder':
                    list_files(item['id'])
                else:
                    total_files += 1

            page_token = results.get('nextPageToken')
            if page_token:
                list_files(folder_id)

        list_files(folder_id)

        print(f'Total files in folder "{folder_name}": {total_files}')
        return total_files

    except Exception as e:
        print(f"Error: {e}")

def main():
    service = get_drive_service()
    entrypoint_drive_folder_id = '1ugHtUXt1WhRrddKYdw5udTlCVH7lwMu_'
    home_tasks_folder_id = '1NF4IZ-GWgZhhE1PWVg8eF7MQ2Vsv8vu9'
    
    
    count_files_in_folder(service, entrypoint_drive_folder_id)
    count_files_in_folder(service, home_tasks_folder_id)


if __name__ == '__main__':
    main()
